name: "Cachix"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            host: kratos
          - os: ubuntu-latest
            host: brenda-blade
          - os: ubuntu-latest
            host: chromebook
          - os: ubuntu-latest
            host: inix
          - os: ubuntu-latest
            host: kronos
          - os: ubuntu-24.04-arm
            host: hermes
    runs-on: ${{ matrix.os }}
    steps:
    - run: sudo rm -rf /opt&
    - name: Free GitHub Actions Disk Space (Ubuntu)
      uses: coder-xiaomo/free-disk-space@main
      with:
        # this might remove tools that are actually needed if set to "true"
        tool-cache: true
        # all of these default to true and will be cleared, so set to "false"
        # if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
#    - name: Restore and save Nix store
#      uses: nix-community/cache-nix-action@v6
#      with:
#        # restore and save a cache using this key
#        primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
#        # if there's no cache hit, restore a cache by this prefix
#        restore-prefixes-first-match: nix-${{ runner.os }}-
#        # collect garbage until the Nix store size (in bytes) is at most this number
#        # before trying to save a new cache
#        # 1G = 1073741824
#        gc-max-store-size-linux: 1G
#        # do purge caches
#        purge: true
#        # purge all versions of the cache
#        purge-prefixes: nix-${{ runner.os }}-
#        # created more than this number of seconds ago
#        purge-created: 0
#        # or, last accessed more than this number of seconds ago
#        # relative to the start of the `Post Restore and save Nix store` phase
#        purge-last-accessed: 0
#        # except any version with the key that is the same as the `primary-key`
#        purge-primary-key: never
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v31
      with:
        enable_kvm: true
        extra_nix_config: "system-features = nixos-test benchmark big-parallel kvm"
    - uses: cachix/cachix-action@v16
      with:
        name: deidrael
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        extraPullNames: nix-community

    - name: x86_64-linux Build
      if: matrix.os == 'ubuntu-latest'
#      run: nix build -L .#{kratos,brenda-blade,chromebook,inix,kronos}
      run: nix build -L .#nixosConfigurations.${{matrix.host}}.config.system.build.toplevel

    - name: aarch64 Build
      if: matrix.os == 'ubuntu-24.04-arm'
      run: nix build -L .#nixosConfigurations.${{matrix.host}}.config.system.build.toplevel

    - name: Deploy
      run: |
        cachix push deidrael ./result*
